#pragma checksum "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\Shared\Components\GetYearlyInComePerMonth\Default.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "012698457726491f91543cddab60135d0b2c4744"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Shared_Components_GetYearlyInComePerMonth_Default), @"mvc.1.0.view", @"/Views/Shared/Components/GetYearlyInComePerMonth/Default.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 4 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\_ViewImports.cshtml"
using Infrastructure.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\_ViewImports.cshtml"
using Microsoft.AspNetCore.Mvc.TagHelpers;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\_ViewImports.cshtml"
using Humanizer;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\_ViewImports.cshtml"
using Humanizer.Localisation;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\_ViewImports.cshtml"
using static Infrastructure.Common.ClaimsList;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"012698457726491f91543cddab60135d0b2c4744", @"/Views/Shared/Components/GetYearlyInComePerMonth/Default.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"29cb1d535e7ca2410b898a4bdbe21b3b16e0f345", @"/Views/_ViewImports.cshtml")]
    public class Views_Shared_Components_GetYearlyInComePerMonth_Default : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<Infrastructure.Statistics.ViewModels.GetInComeAndSpendPerMonthInYearVm>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\Shared\Components\GetYearlyInComePerMonth\Default.cshtml"
  
    Layout = null;
    int year = @DateTime.Now.ToAzDateTime().Year;
    if (Model?.Incomes != null)
    {
        if (Model.Incomes.Any())
        {
            year = Model.Incomes.FirstOrDefault()!.Year;
        }
    }

#line default
#line hidden
#nullable disable
            WriteLiteral("<div class=\"card\">\n    <div class=\"card-header header-elements-inline\">\n        <h5 class=\"card-title\">Gəlirlər və Xərclər ");
#nullable restore
#line 15 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\Shared\Components\GetYearlyInComePerMonth\Default.cshtml"
                                              Write(year);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"</h5>
        <div class=""header-elements"">
        </div>
    </div>

    <div class=""card-body"">
        <div class=""chart-container"">
            <div class=""chart has-fixed-height"" id=""columns_basic""></div>
        </div>
    </div>
</div>
<!-- /basic columns -->


<script type=""text/javascript"">


    var incomesJson = ");
#nullable restore
#line 32 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\Shared\Components\GetYearlyInComePerMonth\Default.cshtml"
                 Write(Json.Serialize(Model?.Incomes));

#line default
#line hidden
#nullable disable
            WriteLiteral(";\n    var incomes = [];\n    incomesJson.forEach(item => {\n            incomes.push(item.total);\n        }\n    );\n\n    var spendsJson = ");
#nullable restore
#line 39 "C:\Users\sahan\Desktop\CafeTap-master\Desktop\cafe_tap\CafeTap\Views\Shared\Components\GetYearlyInComePerMonth\Default.cshtml"
                Write(Json.Serialize(Model?.Spends));

#line default
#line hidden
#nullable disable
            WriteLiteral(@";
    var spends = [];
    spendsJson.forEach(item => {
        spends.push(item.total);
    });

    
    var EchartsColumnsBasicLight = function () {


        //
        // Setup module components
        //

        // Basic column chart
        var _columnsBasicLightExample = function () {
            if (typeof echarts == 'undefined') {
                console.warn('Warning - echarts.min.js is not loaded.');
                return;
            }

            // Define element
            var columns_basic_element = document.getElementById('columns_basic');


            //
            // Charts configuration
            //

            if (columns_basic_element) {

                // Initialize chart
                var columns_basic = echarts.init(columns_basic_element);


                //
                // Chart config
                //

                // Options
                columns_basic.setOption({

                    // Define colors
                    color: ['#2ec7c9', '#b6a2de', '#5ab");
            WriteLiteral(@"1ef', '#ffb980', '#d87a80'],

                    // Global text styles
                    textStyle: {
                        fontFamily: 'Roboto, Arial, Verdana, sans-serif',
                        fontSize: 13
                    },

                    // Chart animation duration
                    animationDuration: 750,

                    // Setup grid
                    grid: {
                        left: 0,
                        right: 40,
                        top: 35,
                        bottom: 0,
                        containLabel: true
                    },

                    // Add legend
                    legend: {
                        data: ['Gəlirlər', 'Xərclər'],
                        itemHeight: 8,
                        itemGap: 20,
                        textStyle: {
                            padding: [0, 5]
                        }
                    },

                    // Add tooltip
                    tooltip: {
                        trigger: '");
            WriteLiteral(@"axis',
                        backgroundColor: 'rgba(0,0,0,0.75)',
                        padding: [10, 15],
                        textStyle: {
                            fontSize: 13,
                            fontFamily: 'Roboto, sans-serif'
                        }
                    },

                    // Horizontal axis
                    xAxis: [{
                        type: 'category',
                        data: ['Yan', 'Fev', 'Mar', 'Apr', 'May', 'İyun', 'İyul', 'Avg', 'Sen', 'Okt', 'Nov', 'Dek'],
                        axisLabel: {
                            color: '#333'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#999'
                            }
                        },
                        splitLine: {
                            show: true,
                            lineStyle: {
                                color: '#eee',
                                type: 'dash");
            WriteLiteral(@"ed'
                            }
                        }
                    }],

                    // Vertical axis
                    yAxis: [{
                        type: 'value',
                        axisLabel: {
                            color: '#333'
                        },
                        axisLine: {
                            lineStyle: {
                                color: '#999'
                            }
                        },
                        splitLine: {
                            lineStyle: {
                                color: ['#eee']
                            }
                        },
                        splitArea: {
                            show: true,
                            areaStyle: {
                                color: ['rgba(250,250,250,0.1)', 'rgba(0,0,0,0.01)']
                            }
                        }
                    }],

                    // Add series
                    series: [
                ");
            WriteLiteral(@"        {
                            name: 'Gəlirlər',
                            type: 'bar',
                            data: incomes,
                            itemStyle: {
                                normal: {
                                    label: {
                                        show: true,
                                        position: 'top',
                                        textStyle: {
                                            fontWeight: 500
                                        }
                                    }
                                }
                            }
                            //markLine: {
                            //    data: [{ type: 'average', name: 'Average' }]
                            //}
                        },
                        {
                            name: 'Xərclər',
                            type: 'bar',
                            data: spends,
                            itemStyle: {
               ");
            WriteLiteral(@"                 normal: {
                                    label: {
                                        show: true,
                                        position: 'top',
                                        textStyle: {
                                            fontWeight: 500
                                        }
                                    }
                                }
                            }
                            //markLine: {
                            //    data: [{ type: 'average', name: 'Average' }]
                            //}
                        }
                    ]
                });
            }


            //
            // Resize charts
            //

            // Resize function
            var triggerChartResize = function () {
                columns_basic_element && columns_basic.resize();
            };

            // On sidebar width change
            var sidebarToggle = document.querySelector('.sidebar-control');
           ");
            WriteLiteral(@" sidebarToggle && sidebarToggle.addEventListener('click', triggerChartResize);

            // On window resize
            var resizeCharts;
            window.addEventListener('resize', function () {
                clearTimeout(resizeCharts);
                resizeCharts = setTimeout(function () {
                    triggerChartResize();
                }, 200);
            });
        };


        //
        // Return objects assigned to module
        //

        return {
            init: function () {
                _columnsBasicLightExample();
            }
        }
    }();


    // Initialize module
    // ------------------------------

    document.addEventListener('DOMContentLoaded', function () {
        EchartsColumnsBasicLight.init();
    });

</script>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public AzCultureInfo AzCulture { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<Infrastructure.Statistics.ViewModels.GetInComeAndSpendPerMonthInYearVm> Html { get; private set; }
    }
}
#pragma warning restore 1591
